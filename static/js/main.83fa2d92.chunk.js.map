{"version":3,"sources":["logo.svg","utils/fetchJSON.js","constants.js","components/ListRenderer/ListRenderer.js","components/LinkTile/LinkTile.js","components/RaceTile/RaceTile.js","pages/HomePage/HomePage.js","pages/SeasonDetail/SeasonDetail.js","App.js","reportWebVitals.js","index.js"],"names":["getJSON","url","cb","toggleLoader","showLoader","hideLoader","getJSONData","a","fetch","then","response","json","data","console","log","BASE_URL","END_POINTS","SEASONS","SEASON_DETAILS_HEADERS","Circuit","Location","circuitId","circuitName","date","raceName","round","season","result","HEADERS","mapper","props","path","label","className","linkClass","classNames","to","title","tileClass","ListRenderer","componentName","list","Component","listClass","map","item","HomePage","useState","seasonsList","updateSeasonsList","isLoading","setIsLoading","useEffect","bind","seasonsData","MRData","SeasonTable","Seasons","seasonDetail","type","height","width","SeasonDetails","seasonData","setSeasonData","year","useParams","races","RaceTable","Races","App","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83fa2d92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const getJSON = (url,cb, toggleLoader = []) => {\n    const [ showLoader, hideLoader ] = toggleLoader;\n    const getJSONData = async () => {\n        if(showLoader && typeof showLoader === 'function'){\n            showLoader();\n        }\n        const data = await fetch(url).then(response => response.json());\n        if(hideLoader &&  typeof hideLoader === 'function'){\n            console.log('hiding loader ....');\n            hideLoader();\n        }\n        if(cb && typeof cb === 'function'){\n            cb(data);\n        }\n    }\n    getJSONData();\n}\n\nexport { getJSON };","const BASE_URL = 'https://ergast.com/api/f1';\n\n \nconst END_POINTS = {\n        BASE_URL,\n        SEASONS: `${BASE_URL}/seasons.json?limit=75`\n}\n\nconst SEASON_DETAILS_HEADERS = {\n    Circuit : { \n        Location: 'Location', \n        circuitId: 'Circuit ID', \n        circuitName: 'Circuit Name' \n        }, \n    date : 'Date', \n    raceName: 'Race Name', \n    round: 'Round', \n    season: 'Season',\n    result: 'View Result'\n}\n\nconst HEADERS = {\n    HOME_PAGE: 'Formula One Racing Seasons',\n}\n\nexport { END_POINTS, SEASON_DETAILS_HEADERS, HEADERS }\n","import React from 'react';\nimport LinkTile from '../LinkTile/LinkTile';\nimport RaceTile from '../RaceTile/RaceTile';\nimport classNames from 'classnames';\n\nconst mapper = {\n    'link-tile': LinkTile,\n    'race-tile': RaceTile \n}\n\nconst ListRenderer = (props) => {\n    const { componentName, list, className } = props;\n    const Component = mapper[componentName];\n    const listClass = classNames(className, 'list');\n    return (<section className={listClass}>\n        {list.map( item => <Component {...item} />)}\n    </section>)\n}\n\nexport default ListRenderer;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport  classNames  from 'classnames';\n\n\n\nconst LinkTile = (props) => {\n    const { path, label, className} = props;\n    const linkClass= classNames(className, 'tile');\n    return <Link to={path} className={linkClass} title={`Formulae 1 season ${label}`}>{label}</Link>\n}\n\nexport default LinkTile;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst RaceTile = (props) => {\n    const { Circuit : { Location: location, circuitId, circuitName }, \n            date, raceName, round, season, result, className } = props;\n    const tileClass = classNames(className,'race-tile');\n\n    return (<div className={tileClass}>\n                <span className=\"mobile-only-inline-block\">{`Round ${ !result ? round : 'Number'}`}</span>\n                <span>{date}</span>\n                <span>{circuitName}</span>\n                <span>{raceName}</span>\n                <span className=\"desktop-only-inline-block\">{round}</span>\n                { !result && <Link to={`${season}/${round}/results`} title={`season ${season} results`}>Result</Link>}\n                { result && <span>{result}</span>}\n            </div>);\n}\n\nexport default RaceTile;","import React, {useEffect, useState } from 'react';\nimport Loader from 'react-loader-spinner';\n\nimport { getJSON } from '../../utils/fetchJSON';\nimport { END_POINTS, HEADERS } from '../../constants';\nimport ListRenderer from '../../components/ListRenderer/ListRenderer';\n\nimport './HomePage.css';\n\nconst HomePage = () => {\n    const [ seasonsList, updateSeasonsList ] = useState([]);\n    const [ isLoading, setIsLoading ] = useState(false);\n\n    const updateList = (data) =>  {\n        const { MRData: { SeasonTable: { Seasons } } } = data;\n        const seasonsData = Seasons.map( seasonDetail => ({\n            path: `/season/${seasonDetail.season}`,\n            label: seasonDetail.season\n        }));\n        updateSeasonsList([...seasonsData]);\n    }\n\n    const showLoader = () => {\n        setIsLoading(true);\n    }\n\n    const hideLoader = () => {\n        setIsLoading(false);\n    }\n\n    useEffect(getJSON.bind(null,END_POINTS.SEASONS,updateList, [showLoader, hideLoader]),[]);\n\n    if(isLoading){\n        return <Loader type=\"Circles\" className=\"homepage-loader\" height=\"200\" width=\"200\"/>\n    }\n    return (  \n        <section className=\"homepage\">\n            <h1>{HEADERS.HOME_PAGE}</h1>\n            <ListRenderer componentName=\"link-tile\" list={seasonsList} />\n        </section>\n    );\n}\n\nexport default HomePage;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ListRenderer from '../../components/ListRenderer/ListRenderer';\nimport { END_POINTS, SEASON_DETAILS_HEADERS } from '../../constants';\nimport { getJSON } from '../../utils/fetchJSON';\n\nimport './SeasonDetail.css';\n\nconst SeasonDetails = () => {\n    const [ seasonData, setSeasonData ] = useState([]);\n    const fetchSeasonDetails = (data) => {\n        const { MRData: { RaceTable: { Races: races }}} = data;\n        setSeasonData([SEASON_DETAILS_HEADERS,...races]);\n    }\n    const { year } = useParams();\n    \n    useEffect(getJSON.bind(null, `${END_POINTS.BASE_URL}/${year}.json`, fetchSeasonDetails),[]);\n\n    return (<section className=\"season-details\">\n                <h1>Season Details for year {year}</h1>\n                <ListRenderer componentName=\"race-tile\" list={seasonData}/>\n            </section>)\n}\n\nexport default SeasonDetails;","import logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport HomePage from './pages/HomePage/HomePage';\nimport SeasonDetails from './pages/SeasonDetail/SeasonDetail';\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/react-navigation-animations\">\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/season/:year\">\n            <SeasonDetails />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}